<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="3" passed="2" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-10-05T19:46:20 IST" name="AutomationExerciseSuite" finished-at="2025-10-05T19:47:14 IST" duration-ms="54108">
    <groups>
      <group name="negative">
        <method signature="TC03_LoginWithIncorrectCredentials.shouldDisplayErrorForInvalidLoginCredentials()[pri:3, instance:com.AutomationExercise.Tests.TC03_LoginWithIncorrectCredentials@d29f28]" name="shouldDisplayErrorForInvalidLoginCredentials" class="com.AutomationExercise.Tests.TC03_LoginWithIncorrectCredentials"/>
      </group> <!-- negative -->
      <group name="regression">
        <method signature="TC03_LoginWithIncorrectCredentials.shouldDisplayErrorForInvalidLoginCredentials()[pri:3, instance:com.AutomationExercise.Tests.TC03_LoginWithIncorrectCredentials@d29f28]" name="shouldDisplayErrorForInvalidLoginCredentials" class="com.AutomationExercise.Tests.TC03_LoginWithIncorrectCredentials"/>
      </group> <!-- regression -->
      <group name="smoke">
        <method signature="TC01_RegisterUser.registerUserTest()[pri:1, instance:com.AutomationExercise.Tests.TC01_RegisterUser@67080771]" name="registerUserTest" class="com.AutomationExercise.Tests.TC01_RegisterUser"/>
        <method signature="TC02_LoginUser.loginUserTest()[pri:2, instance:com.AutomationExercise.Tests.TC02_LoginUser@932bc4a]" name="loginUserTest" class="com.AutomationExercise.Tests.TC02_LoginUser"/>
      </group> <!-- smoke -->
    </groups>
    <test started-at="2025-10-05T19:46:20 IST" name="AutomationExerciseTests" finished-at="2025-10-05T19:47:14 IST" duration-ms="54108">
      <class name="com.AutomationExercise.Tests.TC03_LoginWithIncorrectCredentials">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.AutomationExercise.Tests.TC03_LoginWithIncorrectCredentials@d29f28]" started-at="2025-10-05T19:47:06 IST" name="setUp" finished-at="2025-10-05T19:47:10 IST" duration-ms="3773" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:com.AutomationExercise.Tests.TC03_LoginWithIncorrectCredentials@d29f28]" started-at="2025-10-05T19:47:10 IST" name="startTest" finished-at="2025-10-05T19:47:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.AutomationExercise.Tests.TC03_LoginWithIncorrectCredentials.shouldDisplayErrorForInvalidLoginCredentials()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setupWait()[pri:0, instance:com.AutomationExercise.Tests.TC03_LoginWithIncorrectCredentials@d29f28]" started-at="2025-10-05T19:47:10 IST" name="setupWait" finished-at="2025-10-05T19:47:10 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupWait -->
        <test-method signature="shouldDisplayErrorForInvalidLoginCredentials()[pri:3, instance:com.AutomationExercise.Tests.TC03_LoginWithIncorrectCredentials@d29f28]" started-at="2025-10-05T19:47:10 IST" name="shouldDisplayErrorForInvalidLoginCredentials" finished-at="2025-10-05T19:47:14 IST" duration-ms="4401" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDisplayErrorForInvalidLoginCredentials -->
        <test-method is-config="true" signature="captureResult(org.testng.ITestResult)[pri:0, instance:com.AutomationExercise.Tests.TC03_LoginWithIncorrectCredentials@d29f28]" started-at="2025-10-05T19:47:14 IST" name="captureResult" finished-at="2025-10-05T19:47:14 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=shouldDisplayErrorForInvalidLoginCredentials status=SUCCESS method=TC03_LoginWithIncorrectCredentials.shouldDisplayErrorForInvalidLoginCredentials()[pri:3, instance:com.AutomationExercise.Tests.TC03_LoginWithIncorrectCredentials@d29f28] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureResult -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.AutomationExercise.Tests.TC03_LoginWithIncorrectCredentials@d29f28]" started-at="2025-10-05T19:47:14 IST" name="tearDown" finished-at="2025-10-05T19:47:14 IST" duration-ms="285" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.AutomationExercise.Tests.TC03_LoginWithIncorrectCredentials -->
      <class name="com.AutomationExercise.Tests.TC01_RegisterUser">
        <test-method is-config="true" signature="setupReport()[pri:0, instance:com.AutomationExercise.Tests.TC01_RegisterUser@67080771]" started-at="2025-10-05T19:46:20 IST" name="setupReport" finished-at="2025-10-05T19:46:20 IST" duration-ms="238" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupReport -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.AutomationExercise.Tests.TC01_RegisterUser@67080771]" started-at="2025-10-05T19:46:20 IST" name="setUp" finished-at="2025-10-05T19:46:25 IST" duration-ms="4711" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:com.AutomationExercise.Tests.TC01_RegisterUser@67080771]" started-at="2025-10-05T19:46:25 IST" name="startTest" finished-at="2025-10-05T19:46:25 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.AutomationExercise.Tests.TC01_RegisterUser.registerUserTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setupWait()[pri:0, instance:com.AutomationExercise.Tests.TC01_RegisterUser@67080771]" started-at="2025-10-05T19:46:25 IST" name="setupWait" finished-at="2025-10-05T19:46:25 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupWait -->
        <test-method signature="registerUserTest()[pri:1, instance:com.AutomationExercise.Tests.TC01_RegisterUser@67080771]" started-at="2025-10-05T19:46:25 IST" name="registerUserTest" finished-at="2025-10-05T19:46:36 IST" duration-ms="10833" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registerUserTest -->
        <test-method is-config="true" signature="captureResult(org.testng.ITestResult)[pri:0, instance:com.AutomationExercise.Tests.TC01_RegisterUser@67080771]" started-at="2025-10-05T19:46:36 IST" name="captureResult" finished-at="2025-10-05T19:46:36 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=registerUserTest status=SUCCESS method=TC01_RegisterUser.registerUserTest()[pri:1, instance:com.AutomationExercise.Tests.TC01_RegisterUser@67080771] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureResult -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.AutomationExercise.Tests.TC01_RegisterUser@67080771]" started-at="2025-10-05T19:46:36 IST" name="tearDown" finished-at="2025-10-05T19:46:36 IST" duration-ms="324" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="flushReport()[pri:0, instance:com.AutomationExercise.Tests.TC01_RegisterUser@67080771]" started-at="2025-10-05T19:47:14 IST" name="flushReport" finished-at="2025-10-05T19:47:15 IST" duration-ms="428" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flushReport -->
      </class> <!-- com.AutomationExercise.Tests.TC01_RegisterUser -->
      <class name="com.AutomationExercise.Tests.TC02_LoginUser">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.AutomationExercise.Tests.TC02_LoginUser@932bc4a]" started-at="2025-10-05T19:46:36 IST" name="setUp" finished-at="2025-10-05T19:46:41 IST" duration-ms="4758" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="startTest(java.lang.reflect.Method)[pri:0, instance:com.AutomationExercise.Tests.TC02_LoginUser@932bc4a]" started-at="2025-10-05T19:46:41 IST" name="startTest" finished-at="2025-10-05T19:46:41 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.AutomationExercise.Tests.TC02_LoginUser.loginUserTest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="setupWait()[pri:0, instance:com.AutomationExercise.Tests.TC02_LoginUser@932bc4a]" started-at="2025-10-05T19:46:41 IST" name="setupWait" finished-at="2025-10-05T19:46:41 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupWait -->
        <test-method signature="loginUserTest()[pri:2, instance:com.AutomationExercise.Tests.TC02_LoginUser@932bc4a]" started-at="2025-10-05T19:46:41 IST" name="loginUserTest" finished-at="2025-10-05T19:47:06 IST" duration-ms="24547" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[User is not logged in expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: User is not logged in expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1590)
at org.testng.Assert.assertTrue(Assert.java:57)
at com.AutomationExercise.Tests.TC02_LoginUser.loginUserTest(TC02_LoginUser.java:59)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:741)
at org.testng.TestRunner.run(TestRunner.java:616)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginUserTest -->
        <test-method is-config="true" signature="captureResult(org.testng.ITestResult)[pri:0, instance:com.AutomationExercise.Tests.TC02_LoginUser@932bc4a]" started-at="2025-10-05T19:47:06 IST" name="captureResult" finished-at="2025-10-05T19:47:06 IST" duration-ms="129" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginUserTest status=FAILURE method=TC02_LoginUser.loginUserTest()[pri:2, instance:com.AutomationExercise.Tests.TC02_LoginUser@932bc4a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureResult -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.AutomationExercise.Tests.TC02_LoginUser@932bc4a]" started-at="2025-10-05T19:47:06 IST" name="tearDown" finished-at="2025-10-05T19:47:06 IST" duration-ms="266" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.AutomationExercise.Tests.TC02_LoginUser -->
    </test> <!-- AutomationExerciseTests -->
  </suite> <!-- AutomationExerciseSuite -->
</testng-results>
